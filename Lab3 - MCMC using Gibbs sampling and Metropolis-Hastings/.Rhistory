source('~/Desktop/TDDE07/Labs/Lab3 - MCMC using Gibbs sampling and Metropolis-Hastings/Lab_3_new.R', echo=TRUE)
# Libraries and initial setup
data <- read.table("/Users/davidgumpert/Desktop/TDDE07/Labs/Lab4 - Hamiltonian Monte Carlo with Stan/campy.txt")
# Libraries and initial setup
data <- read.table("/Users/davidgumpert/Desktop/TDDE07/Labs/Lab4 - Hamiltonian Monte Carlo with Stan/campy.txt")
head(data)
# Libraries and initial setup
data <- read.table("/Users/davidgumpert/Desktop/TDDE07/Labs/Lab4 - Hamiltonian Monte Carlo with Stan/campy.txt", header = TRUE)
head(data)
source('~/Desktop/TDDE07/TDDE07_Bayesian_Learning/Lab_4/Lab_4_new.R', echo=TRUE)
source('~/Desktop/TDDE07/TDDE07_Bayesian_Learning/Lab_4/Lab_4_new.R', echo=TRUE)
phiVect <- seq(-1,1,100)
phiVect
help(seq)
phiVect <- seq(-1,1,length.out=100)
phiVect
source('~/Desktop/TDDE07/TDDE07_Bayesian_Learning/Lab_4/Lab_4_new.R', echo=TRUE)
source('~/Desktop/TDDE07/TDDE07_Bayesian_Learning/Lab_4/Lab_4_new.R', echo=TRUE)
install.packages("rstan")
source('~/Desktop/TDDE07/TDDE07_Bayesian_Learning/Lab_4/Lab_4_new.R', echo=TRUE)
install.packages("rstan")
source('~/Desktop/TDDE07/TDDE07_Bayesian_Learning/Lab_4/Lab_4_new.R', echo=TRUE)
source('~/Desktop/TDDE07/TDDE07_Bayesian_Learning/Lab_4/Lab_4_new.R', echo=TRUE)
source('~/Desktop/TDDE07/TDDE07_Bayesian_Learning/Lab_4/Lab_4_new.R', echo=TRUE)
phiVect
phiLength <- length(phiVect)
X <- c()
par(mfrow=c(3,3))
xT <- mu + phi*(xPrevious-mu) + error
source('~/Desktop/TDDE07/TDDE07_Bayesian_Learning/Lab_4/Lab_4_new.R', echo=TRUE)
source('~/Desktop/TDDE07/TDDE07_Bayesian_Learning/Lab_4/Lab_4_new.R', echo=TRUE)
source('~/Desktop/TDDE07/TDDE07_Bayesian_Learning/Lab_4/Lab_4_new.R', echo=TRUE)
source('~/Desktop/TDDE07/TDDE07_Bayesian_Learning/Lab_4/Lab_4_new.R', echo=TRUE)
source('~/Desktop/TDDE07/TDDE07_Bayesian_Learning/Lab_4/Lab_4_new.R', echo=TRUE)
source('~/Desktop/TDDE07/TDDE07_Bayesian_Learning/Lab_4/Lab_4_new.R', echo=TRUE)
source('~/Desktop/TDDE07/TDDE07_Bayesian_Learning/Lab_4/Lab_4_new.R', echo=TRUE)
# (b)
phiVect <- c(0.3, 0.95)
# Function to simulate from AR(1) process
AR1Sim <- function(phiVect, mu, sigmaSq, T) {
phiLength <- length(phiVect)
xMatrix <- c()
for(phiN in 1:phiLength) {
xVect <- c()
phi <- phiVect[phiN]
for(i in 1:T) {
error <- rnorm(1, 0, sqrt(sigmaSq))
xT <- mu + phi*(xPrevious-mu) + error
xPrevious <- xT
xVect <- rbind(xVect, xT)
}
plot(xVect, col="darkblue", main=paste("phi: ", phi))
xMatrix <- cbind(xMatrix, xVect)
}
return(xMatrix)
}
# Defining initial parameter values
mu <- 10
sigmaSq <- 2
T <- 200
xPrevious <- mu
phiVect <- seq(-1,1,0.25)
source('~/Desktop/TDDE07/TDDE07_Bayesian_Learning/Lab_4/Lab_4_new.R', echo=TRUE)
source('~/Desktop/TDDE07/TDDE07_Bayesian_Learning/Lab_4/Lab_4_new.R', echo=TRUE)
source('~/Desktop/TDDE07/TDDE07_Bayesian_Learning/Lab_4/Lab_4_new.R', echo=TRUE)
source('~/Desktop/TDDE07/TDDE07_Bayesian_Learning/Lab_4/Lab_4_new.R', echo=TRUE)
source('~/Desktop/TDDE07/TDDE07_Bayesian_Learning/Lab_4/Lab_4_new.R', echo=TRUE)
# Settting the stan model data
x <- as.vector(xMatrixB[,1])
y <- as.vector(xMatrixB[,2])
N <- length(x)
source('~/Desktop/TDDE07/TDDE07_Bayesian_Learning/Lab_4/Lab_4_new.R', echo=TRUE)
# (b)
phiVectB <- c(0.3, 0.95)
par(mfrow=c(1,2))
source('~/Desktop/TDDE07/TDDE07_Bayesian_Learning/Lab_4/Lab_4_new.R', echo=TRUE)
fitPhi03
source('~/Desktop/TDDE07/TDDE07_Bayesian_Learning/Lab_4/Lab_4_new.R', echo=TRUE)
source('~/Desktop/TDDE07/TDDE07_Bayesian_Learning/Lab_4/Lab_4_new.R', echo=TRUE)
source('~/Desktop/TDDE07/Labs/Lab4 - Hamiltonian Monte Carlo with Stan/Assign1.R', echo=TRUE)
source('~/Desktop/TDDE07/TDDE07_Bayesian_Learning/Lab_4/Lab_4_new.R', echo=TRUE)
source('~/Desktop/TDDE07/TDDE07_Bayesian_Learning/Lab_4/Lab_4_new.R', echo=TRUE)
source('~/Desktop/TDDE07/TDDE07_Bayesian_Learning/Lab_4/Lab_4_new.R', echo=TRUE)
source('~/Desktop/TDDE07/TDDE07_Bayesian_Learning/Lab_4/Lab_4_new.R', echo=TRUE)
